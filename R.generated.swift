//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `hiden`.
    static let hiden = Rswift.ColorResource(bundle: R.hostingBundle, name: "hiden")
    /// Color `main.disable`.
    static let mainDisable = Rswift.ColorResource(bundle: R.hostingBundle, name: "main.disable")
    /// Color `mainOrange`.
    static let mainOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainOrange")
    /// Color `tabbar`.
    static let tabbar = Rswift.ColorResource(bundle: R.hostingBundle, name: "tabbar")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "hiden", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func hiden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.hiden, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "main.disable", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainDisable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainDisable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainOrange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "tabbar", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tabbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tabbar, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "hiden", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func hiden(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.hiden.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "main.disable", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainDisable(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainDisable.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainOrange", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainOrange(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainOrange.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "tabbar", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func tabbar(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.tabbar.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 9 files.
  struct file {
    /// Resource file `RobotoSlab-Black.ttf`.
    static let robotoSlabBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoSlab-Black", pathExtension: "ttf")
    /// Resource file `RobotoSlab-Bold.ttf`.
    static let robotoSlabBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoSlab-Bold", pathExtension: "ttf")
    /// Resource file `RobotoSlab-ExtraBold.ttf`.
    static let robotoSlabExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoSlab-ExtraBold", pathExtension: "ttf")
    /// Resource file `RobotoSlab-ExtraLight.ttf`.
    static let robotoSlabExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoSlab-ExtraLight", pathExtension: "ttf")
    /// Resource file `RobotoSlab-Light.ttf`.
    static let robotoSlabLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoSlab-Light", pathExtension: "ttf")
    /// Resource file `RobotoSlab-Medium.ttf`.
    static let robotoSlabMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoSlab-Medium", pathExtension: "ttf")
    /// Resource file `RobotoSlab-Regular.ttf`.
    static let robotoSlabRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoSlab-Regular", pathExtension: "ttf")
    /// Resource file `RobotoSlab-SemiBold.ttf`.
    static let robotoSlabSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoSlab-SemiBold", pathExtension: "ttf")
    /// Resource file `RobotoSlab-Thin.ttf`.
    static let robotoSlabThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoSlab-Thin", pathExtension: "ttf")

    /// `bundle.url(forResource: "RobotoSlab-Black", withExtension: "ttf")`
    static func robotoSlabBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoSlabBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoSlab-Bold", withExtension: "ttf")`
    static func robotoSlabBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoSlabBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoSlab-ExtraBold", withExtension: "ttf")`
    static func robotoSlabExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoSlabExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoSlab-ExtraLight", withExtension: "ttf")`
    static func robotoSlabExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoSlabExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoSlab-Light", withExtension: "ttf")`
    static func robotoSlabLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoSlabLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoSlab-Medium", withExtension: "ttf")`
    static func robotoSlabMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoSlabMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoSlab-Regular", withExtension: "ttf")`
    static func robotoSlabRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoSlabRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoSlab-SemiBold", withExtension: "ttf")`
    static func robotoSlabSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoSlabSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RobotoSlab-Thin", withExtension: "ttf")`
    static func robotoSlabThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoSlabThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 9 fonts.
  struct font: Rswift.Validatable {
    /// Font `RobotoSlab-Black`.
    static let robotoSlabBlack = Rswift.FontResource(fontName: "RobotoSlab-Black")
    /// Font `RobotoSlab-Bold`.
    static let robotoSlabBold = Rswift.FontResource(fontName: "RobotoSlab-Bold")
    /// Font `RobotoSlab-ExtraBold`.
    static let robotoSlabExtraBold = Rswift.FontResource(fontName: "RobotoSlab-ExtraBold")
    /// Font `RobotoSlab-ExtraLight`.
    static let robotoSlabExtraLight = Rswift.FontResource(fontName: "RobotoSlab-ExtraLight")
    /// Font `RobotoSlab-Light`.
    static let robotoSlabLight = Rswift.FontResource(fontName: "RobotoSlab-Light")
    /// Font `RobotoSlab-Medium`.
    static let robotoSlabMedium = Rswift.FontResource(fontName: "RobotoSlab-Medium")
    /// Font `RobotoSlab-Regular`.
    static let robotoSlabRegular = Rswift.FontResource(fontName: "RobotoSlab-Regular")
    /// Font `RobotoSlab-SemiBold`.
    static let robotoSlabSemiBold = Rswift.FontResource(fontName: "RobotoSlab-SemiBold")
    /// Font `RobotoSlab-Thin`.
    static let robotoSlabThin = Rswift.FontResource(fontName: "RobotoSlab-Thin")

    /// `UIFont(name: "RobotoSlab-Black", size: ...)`
    static func robotoSlabBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoSlabBlack, size: size)
    }

    /// `UIFont(name: "RobotoSlab-Bold", size: ...)`
    static func robotoSlabBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoSlabBold, size: size)
    }

    /// `UIFont(name: "RobotoSlab-ExtraBold", size: ...)`
    static func robotoSlabExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoSlabExtraBold, size: size)
    }

    /// `UIFont(name: "RobotoSlab-ExtraLight", size: ...)`
    static func robotoSlabExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoSlabExtraLight, size: size)
    }

    /// `UIFont(name: "RobotoSlab-Light", size: ...)`
    static func robotoSlabLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoSlabLight, size: size)
    }

    /// `UIFont(name: "RobotoSlab-Medium", size: ...)`
    static func robotoSlabMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoSlabMedium, size: size)
    }

    /// `UIFont(name: "RobotoSlab-Regular", size: ...)`
    static func robotoSlabRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoSlabRegular, size: size)
    }

    /// `UIFont(name: "RobotoSlab-SemiBold", size: ...)`
    static func robotoSlabSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoSlabSemiBold, size: size)
    }

    /// `UIFont(name: "RobotoSlab-Thin", size: ...)`
    static func robotoSlabThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoSlabThin, size: size)
    }

    static func validate() throws {
      if R.font.robotoSlabBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoSlab-Black' could not be loaded, is 'RobotoSlab-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoSlabBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoSlab-Bold' could not be loaded, is 'RobotoSlab-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoSlabExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoSlab-ExtraBold' could not be loaded, is 'RobotoSlab-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoSlabExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoSlab-ExtraLight' could not be loaded, is 'RobotoSlab-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoSlabLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoSlab-Light' could not be loaded, is 'RobotoSlab-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoSlabMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoSlab-Medium' could not be loaded, is 'RobotoSlab-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoSlabRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoSlab-Regular' could not be loaded, is 'RobotoSlab-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoSlabSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoSlab-SemiBold' could not be loaded, is 'RobotoSlab-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoSlabThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoSlab-Thin' could not be loaded, is 'RobotoSlab-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 40 images.
  struct image {
    /// Image `Template3`.
    static let template3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Template3")
    /// Image `addEvent`.
    static let addEvent = Rswift.ImageResource(bundle: R.hostingBundle, name: "addEvent")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `backgroudLogin`.
    static let backgroudLogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "backgroudLogin")
    /// Image `backgroundLoign1`.
    static let backgroundLoign1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "backgroundLoign1")
    /// Image `backgroundLove`.
    static let backgroundLove = Rswift.ImageResource(bundle: R.hostingBundle, name: "backgroundLove")
    /// Image `count_comment`.
    static let count_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "count_comment")
    /// Image `count_view`.
    static let count_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "count_view")
    /// Image `eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye")
    /// Image `haicham`.
    static let haicham = Rswift.ImageResource(bundle: R.hostingBundle, name: "haicham")
    /// Image `icon_canhbao`.
    static let icon_canhbao = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_canhbao")
    /// Image `icon_send`.
    static let icon_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_send")
    /// Image `lineco`.
    static let lineco = Rswift.ImageResource(bundle: R.hostingBundle, name: "lineco")
    /// Image `logo_love`.
    static let logo_love = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_love")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `love_add`.
    static let love_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "love_add")
    /// Image `love_boy2`.
    static let love_boy2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "love_boy2")
    /// Image `love_boy`.
    static let love_boy = Rswift.ImageResource(bundle: R.hostingBundle, name: "love_boy")
    /// Image `love_girl3`.
    static let love_girl3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "love_girl3")
    /// Image `love_girl`.
    static let love_girl = Rswift.ImageResource(bundle: R.hostingBundle, name: "love_girl")
    /// Image `love_left`.
    static let love_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "love_left")
    /// Image `love_right`.
    static let love_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "love_right")
    /// Image `love_start`.
    static let love_start = Rswift.ImageResource(bundle: R.hostingBundle, name: "love_start")
    /// Image `luonsong2`.
    static let luonsong2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "luonsong2")
    /// Image `luonsong`.
    static let luonsong = Rswift.ImageResource(bundle: R.hostingBundle, name: "luonsong")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `send`.
    static let send = Rswift.ImageResource(bundle: R.hostingBundle, name: "send")
    /// Image `tab_comments_tick`.
    static let tab_comments_tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_comments_tick")
    /// Image `tab_comments`.
    static let tab_comments = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_comments")
    /// Image `tab_even_tick`.
    static let tab_even_tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_even_tick")
    /// Image `tab_event`.
    static let tab_event = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_event")
    /// Image `tab_home_tick`.
    static let tab_home_tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home_tick")
    /// Image `tab_home`.
    static let tab_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_home")
    /// Image `tab_love_tick`.
    static let tab_love_tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_love_tick")
    /// Image `tab_love`.
    static let tab_love = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab_love")
    /// Image `template1`.
    static let template1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "template1")
    /// Image `template2`.
    static let template2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "template2")
    /// Image `template4`.
    static let template4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "template4")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Template3", bundle: ..., traitCollection: ...)`
    static func template3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.template3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addEvent", bundle: ..., traitCollection: ...)`
    static func addEvent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addEvent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backgroudLogin", bundle: ..., traitCollection: ...)`
    static func backgroudLogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroudLogin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backgroundLoign1", bundle: ..., traitCollection: ...)`
    static func backgroundLoign1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundLoign1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backgroundLove", bundle: ..., traitCollection: ...)`
    static func backgroundLove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundLove, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "count_comment", bundle: ..., traitCollection: ...)`
    static func count_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.count_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "count_view", bundle: ..., traitCollection: ...)`
    static func count_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.count_view, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "haicham", bundle: ..., traitCollection: ...)`
    static func haicham(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.haicham, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_canhbao", bundle: ..., traitCollection: ...)`
    static func icon_canhbao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_canhbao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_send", bundle: ..., traitCollection: ...)`
    static func icon_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lineco", bundle: ..., traitCollection: ...)`
    static func lineco(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lineco, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_love", bundle: ..., traitCollection: ...)`
    static func logo_love(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_love, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love_add", bundle: ..., traitCollection: ...)`
    static func love_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love_boy", bundle: ..., traitCollection: ...)`
    static func love_boy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love_boy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love_boy2", bundle: ..., traitCollection: ...)`
    static func love_boy2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love_boy2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love_girl", bundle: ..., traitCollection: ...)`
    static func love_girl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love_girl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love_girl3", bundle: ..., traitCollection: ...)`
    static func love_girl3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love_girl3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love_left", bundle: ..., traitCollection: ...)`
    static func love_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love_right", bundle: ..., traitCollection: ...)`
    static func love_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "love_start", bundle: ..., traitCollection: ...)`
    static func love_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.love_start, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "luonsong", bundle: ..., traitCollection: ...)`
    static func luonsong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.luonsong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "luonsong2", bundle: ..., traitCollection: ...)`
    static func luonsong2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.luonsong2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send", bundle: ..., traitCollection: ...)`
    static func send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_comments", bundle: ..., traitCollection: ...)`
    static func tab_comments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_comments, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_comments_tick", bundle: ..., traitCollection: ...)`
    static func tab_comments_tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_comments_tick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_even_tick", bundle: ..., traitCollection: ...)`
    static func tab_even_tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_even_tick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_event", bundle: ..., traitCollection: ...)`
    static func tab_event(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_event, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_home", bundle: ..., traitCollection: ...)`
    static func tab_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_home_tick", bundle: ..., traitCollection: ...)`
    static func tab_home_tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_home_tick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_love", bundle: ..., traitCollection: ...)`
    static func tab_love(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_love, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab_love_tick", bundle: ..., traitCollection: ...)`
    static func tab_love_tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_love_tick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "template1", bundle: ..., traitCollection: ...)`
    static func template1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.template1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "template2", bundle: ..., traitCollection: ...)`
    static func template2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.template2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "template4", bundle: ..., traitCollection: ...)`
    static func template4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.template4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 19 nibs.
  struct nib {
    /// Nib `CommentTableViewCell`.
    static let commentTableViewCell = _R.nib._CommentTableViewCell()
    /// Nib `CommentsViewController`.
    static let commentsViewController = _R.nib._CommentsViewController()
    /// Nib `DetailCommentTableViewCell`.
    static let detailCommentTableViewCell = _R.nib._DetailCommentTableViewCell()
    /// Nib `DetailEventsViewController`.
    static let detailEventsViewController = _R.nib._DetailEventsViewController()
    /// Nib `EventViewController`.
    static let eventViewController = _R.nib._EventViewController()
    /// Nib `FogotPassViewController`.
    static let fogotPassViewController = _R.nib._FogotPassViewController()
    /// Nib `HomeViewController`.
    static let homeViewController = _R.nib._HomeViewController()
    /// Nib `LoginViewController`.
    static let loginViewController = _R.nib._LoginViewController()
    /// Nib `LoveViewController`.
    static let loveViewController = _R.nib._LoveViewController()
    /// Nib `ProfileViewController`.
    static let profileViewController = _R.nib._ProfileViewController()
    /// Nib `RecentCommentTableViewCell`.
    static let recentCommentTableViewCell = _R.nib._RecentCommentTableViewCell()
    /// Nib `RegisterViewController`.
    static let registerViewController = _R.nib._RegisterViewController()
    /// Nib `SlideMenuTableViewCell`.
    static let slideMenuTableViewCell = _R.nib._SlideMenuTableViewCell()
    /// Nib `SlideMenuViewController`.
    static let slideMenuViewController = _R.nib._SlideMenuViewController()
    /// Nib `StartViewController`.
    static let startViewController = _R.nib._StartViewController()
    /// Nib `Template1TBVCell`.
    static let template1TBVCell = _R.nib._Template1TBVCell()
    /// Nib `Template2TBVCell`.
    static let template2TBVCell = _R.nib._Template2TBVCell()
    /// Nib `Template3TBVCell`.
    static let template3TBVCell = _R.nib._Template3TBVCell()
    /// Nib `Template4TBVCell`.
    static let template4TBVCell = _R.nib._Template4TBVCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommentTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentTableViewCell) instead")
    static func commentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommentsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentsViewController) instead")
    static func commentsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailCommentTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailCommentTableViewCell) instead")
    static func detailCommentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailCommentTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailEventsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailEventsViewController) instead")
    static func detailEventsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailEventsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EventViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventViewController) instead")
    static func eventViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FogotPassViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fogotPassViewController) instead")
    static func fogotPassViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fogotPassViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeViewController) instead")
    static func homeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginViewController) instead")
    static func loginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoveViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loveViewController) instead")
    static func loveViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loveViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileViewController) instead")
    static func profileViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RecentCommentTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recentCommentTableViewCell) instead")
    static func recentCommentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recentCommentTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RegisterViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.registerViewController) instead")
    static func registerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.registerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SlideMenuTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.slideMenuTableViewCell) instead")
    static func slideMenuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.slideMenuTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SlideMenuViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.slideMenuViewController) instead")
    static func slideMenuViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.slideMenuViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StartViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.startViewController) instead")
    static func startViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.startViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Template1TBVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.template1TBVCell) instead")
    static func template1TBVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.template1TBVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Template2TBVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.template2TBVCell) instead")
    static func template2TBVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.template2TBVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Template3TBVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.template3TBVCell) instead")
    static func template3TBVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.template3TBVCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Template4TBVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.template4TBVCell) instead")
    static func template4TBVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.template4TBVCell)
    }
    #endif

    static func commentTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentTableViewCell? {
      return R.nib.commentTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentTableViewCell
    }

    static func commentsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.commentsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailCommentTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailCommentTableViewCell? {
      return R.nib.detailCommentTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailCommentTableViewCell
    }

    static func detailEventsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailEventsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func eventViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.eventViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func fogotPassViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.fogotPassViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loveViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loveViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func recentCommentTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecentCommentTableViewCell? {
      return R.nib.recentCommentTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecentCommentTableViewCell
    }

    static func registerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.registerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func slideMenuTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SlideMenuTableViewCell? {
      return R.nib.slideMenuTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SlideMenuTableViewCell
    }

    static func slideMenuViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.slideMenuViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func startViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.startViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func template1TBVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Template1TBVCell? {
      return R.nib.template1TBVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Template1TBVCell
    }

    static func template2TBVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Template2TBVCell? {
      return R.nib.template2TBVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Template2TBVCell
    }

    static func template3TBVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Template3TBVCell? {
      return R.nib.template3TBVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Template3TBVCell
    }

    static func template4TBVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Template4TBVCell? {
      return R.nib.template4TBVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Template4TBVCell
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CommentsViewController.validate()
      try _DetailEventsViewController.validate()
      try _EventViewController.validate()
      try _FogotPassViewController.validate()
      try _HomeViewController.validate()
      try _LoginViewController.validate()
      try _LoveViewController.validate()
      try _ProfileViewController.validate()
      try _RegisterViewController.validate()
      try _SlideMenuViewController.validate()
      try _StartViewController.validate()
      try _Template1TBVCell.validate()
      try _Template2TBVCell.validate()
      try _Template3TBVCell.validate()
      try _Template4TBVCell.validate()
    }

    struct _CommentTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CommentTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentTableViewCell
      }

      fileprivate init() {}
    }

    struct _CommentsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CommentsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in nib 'CommentsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DetailCommentTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailCommentTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailCommentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailCommentTableViewCell
      }

      fileprivate init() {}
    }

    struct _DetailEventsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailEventsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in nib 'DetailEventsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "count_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'count_comment' is used in nib 'DetailEventsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "count_view", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'count_view' is used in nib 'DetailEventsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'DetailEventsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'send' is used in nib 'DetailEventsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "template1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'template1' is used in nib 'DetailEventsViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EventViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EventViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in nib 'EventViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in nib 'EventViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FogotPassViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FogotPassViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in nib 'FogotPassViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backgroudLogin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroudLogin' is used in nib 'FogotPassViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainOrange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainOrange' is used in nib 'FogotPassViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in nib 'HomeViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LoginViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "backgroudLogin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroudLogin' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eye' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "love_left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'love_left' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "love_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'love_right' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "mainOrange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'mainOrange' is used in nib 'LoginViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _LoveViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoveViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "love_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'love_add' is used in nib 'LoveViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "love_boy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'love_boy' is used in nib 'LoveViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "love_boy2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'love_boy2' is used in nib 'LoveViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "love_girl", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'love_girl' is used in nib 'LoveViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "love_girl3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'love_girl3' is used in nib 'LoveViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "love_start", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'love_start' is used in nib 'LoveViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProfileViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_canhbao", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_canhbao' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in nib 'ProfileViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RecentCommentTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RecentCommentTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecentCommentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecentCommentTableViewCell
      }

      fileprivate init() {}
    }

    struct _RegisterViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RegisterViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "backgroudLogin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroudLogin' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eye' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "love_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'love_add' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "love_left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'love_left' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "love_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'love_right' is used in nib 'RegisterViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SlideMenuTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SlideMenuTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SlideMenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SlideMenuTableViewCell
      }

      fileprivate init() {}
    }

    struct _SlideMenuViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SlideMenuViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "addEvent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addEvent' is used in nib 'SlideMenuViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _StartViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StartViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "backgroudLogin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroudLogin' is used in nib 'StartViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backgroundLoign1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroundLoign1' is used in nib 'StartViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "luonsong", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'luonsong' is used in nib 'StartViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "luonsong2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'luonsong2' is used in nib 'StartViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _Template1TBVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Template1TBVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Template1TBVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Template1TBVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "count_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'count_comment' is used in nib 'Template1TBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "count_view", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'count_view' is used in nib 'Template1TBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'Template1TBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "template1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'template1' is used in nib 'Template1TBVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _Template2TBVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Template2TBVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Template2TBVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Template2TBVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "count_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'count_comment' is used in nib 'Template2TBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "count_view", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'count_view' is used in nib 'Template2TBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "template2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'template2' is used in nib 'Template2TBVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _Template3TBVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Template3TBVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Template3TBVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Template3TBVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Template3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Template3' is used in nib 'Template3TBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "count_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'count_comment' is used in nib 'Template3TBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "count_view", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'count_view' is used in nib 'Template3TBVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _Template4TBVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Template4TBVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Template4TBVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Template4TBVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "count_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'count_comment' is used in nib 'Template4TBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "count_view", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'count_view' is used in nib 'Template4TBVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "template4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'template4' is used in nib 'Template4TBVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
